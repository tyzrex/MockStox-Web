import { type ClassValue, clsx } from "clsx";
import { toast } from "sonner";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

export function makeKeyCleaner(key: string): string {
  return key.replace(/_/g, " ").replace(/\b\w/g, (char) => char.toUpperCase());
}

export function showErrorToasts(errors: string) {
  if (!errors) {
    return;
  }

  console.log(errors);

  const errorMessages = errors.split("|").map((error) => error.trim());
  errorMessages.forEach((error) => {
    toast.error(error);
  });
}

export function formatNepaliCurrency(value: number | string): string {
  // Ensure the input is a valid number
  const numericValue = typeof value === "string" ? parseFloat(value) : value;
  if (isNaN(numericValue)) return "Invalid Number";

  const isNegative = numericValue < 0;
  const strValue = Math.abs(numericValue).toFixed(2); // Ensure two decimal places
  const [integerPart, decimalPart] = strValue.split(".");

  let nepaliFormatted = "";
  let remainingPart = integerPart;

  // Add the first group of 3 digits
  if (remainingPart.length > 3) {
    nepaliFormatted = remainingPart.slice(-3);
    remainingPart = remainingPart.slice(0, -3);
  } else {
    nepaliFormatted = remainingPart;
    remainingPart = "";
  }

  // Add groups of 2 digits separated by commas
  while (remainingPart.length > 0) {
    nepaliFormatted = remainingPart.slice(-2) + "," + nepaliFormatted;
    remainingPart = remainingPart.slice(0, -2);
  }

  // Add negative sign if the original value was negative
  if (isNegative) nepaliFormatted = "-" + nepaliFormatted;

  // Combine the formatted integer part with the decimal part
  return `Rs. ${nepaliFormatted}.${decimalPart}`;
}

const stockData = {
  Capital: ["GICL", "BOKCML", "NIMBCL"],
  "Commercial Banks": [
    "ADBL",
    "CZBIL",
    "EBL",
    "GBIME",
    "HBL",
    "KBL",
    "MBL",
    "NABIL",
    "NBL",
    "NICA",
    "NMB",
    "PCBL",
    "SANIMA",
    "SBI",
    "SBL",
    "SCB",
    "PRVU",
    "RBB",
    "NIMB",
    "LSL",
  ],
  "Corporate Debenture": [
    "EBLB2079",
    "GBIMEB2076",
    "SBIB2079",
    "SBLB2076",
    "SAND2085",
    "NICAD85/86",
    "NICAD8283",
    "SBLD2082",
    "NMBD2085",
    "SRD80",
    "NICD83/84",
    "PBLD86",
    "SBLD83",
    "SRBLD83",
    "BOKD2079",
    "NIBD2082",
    "KBLD86",
    "SBIBD86",
    "GBD80/81",
    "PBLD84",
    "BOKD2086",
    "HBLD83",
    "BOKD86",
    "NICAD8182",
    "NIBD2084",
    "KSBBLD87",
    "ICFCD83",
    "GWFD83",
    "PBD85",
    "GBILD86/87",
    "NBBD2085",
    "MFLD85",
    "NBR2087",
    "MBLD2085",
    "LBLD86",
    "ADBLD83",
    "NMBD87/88",
    "PBLD87",
    "NMBEB92/93",
    "NBLD82",
    "RBBD83",
    "SBD87",
    "SBLD84",
    "SDBD87",
    "NICD88",
    "JBBD87",
    "LBLD88",
    "MBLD87",
    "MND84/85",
    "NBLD85",
    "NCCD86",
    "GBBD85",
    "NIBD84",
    "CBLD88",
    "EBLD86",
    "PBD88",
    "NBLD87",
    "NMBUR93/94",
    "CCBD88",
    "PBD84",
    "SBLD89",
    "SBD89",
    "EBLD85",
    "BOKD86KA",
    "HBLD86",
    "KBLD89",
    "SBID83",
    "NIFRAUR85/86",
    "SCBD",
    "GBILD84/85",
    "NMBD89/90",
    "MLBLD89",
    "EBLE89",
    "LBBLD89",
    "CIZBD86",
    "KBLD90",
    "NABILD87",
    "SBID89",
    "NIMBD90",
  ],
  "Development Bank Limited": [
    "CORBL",
    "EDBL",
    "GBBL",
    "JBBL",
    "KRBL",
    "MDB",
    "MNBBL",
    "NABBC",
    "SADBL",
    "SHINE",
    "SINDU",
    "GRDBL",
    "MLBL",
    "LBBL",
    "KSBBL",
    "SAPDBL",
  ],
  Finance: [
    "CFCL",
    "GFCL",
    "GMFIL",
    "ICFC",
    "JFL",
    "MFIL",
    "MPFL",
    "NFS",
    "PFL",
    "PROFL",
    "SIFC",
    "RLFL",
    "GUFL",
    "BFC",
    "SFCL",
  ],
  "Government Bond": [
    "NRBBR2067",
    "NRBBR2067ga",
    "NRBBR2067ka",
    "NRBBR2067kha",
    "NRBBR2069",
    "NRBBR2071ka",
    "NRBBR2071Kha",
    "NRBBR2072",
    "NRBBR2072ka",
    "NRBBR2073 KA",
    "NRBBR2075",
    "NRBBR2075ka",
    "NRBBR2076",
    "NRBBR2076Ga",
    "NRBBR2076ka",
    "NRBBR2076Kha",
    "9%CSB2082",
    "NRBBR2085Gha",
    "9%CSB2083",
    "NRBBR2083Gha",
  ],
  "Hotels And Tourism": ["OHL", "SHL", "TRH", "CGH", "KDL", "CITY"],
  "Hydro Power": [
    "AHPC",
    "BPCL",
    "CHCL",
    "NHPC",
    "SHPC",
    "RHPC",
    "HURJA",
    "AKPL",
    "BARUN",
    "API",
    "NGPL",
    "MHL",
    "NYADI",
    "SJCL",
    "RHPL",
    "UMHL",
    "DORDI",
    "PHCL",
    "PPL",
    "UPCL",
    "SPL",
    "SPDL",
    "MKJC",
    "SAHAS",
    "KKHC",
    "HPPL",
    "DHPL",
    "BHPL",
    "MHNL",
    "CHL",
    "USHL",
    "SPHL",
    "NHDL",
    "RADHI",
    "BNHC",
    "RHGCL",
    "KPCL",
    "TAMOR",
    "GHL",
    "EHPL",
    "MKHC",
    "BEDC",
    "PMHPL",
    "KBSH",
    "MBJC",
    "GLH",
    "USHEC",
    "AKJCL",
    "LEC",
    "TPC",
    "SHEL",
    "PPCL",
    "TSHL",
    "SSHL",
    "JOSHI",
    "UPPER",
    "TVCL",
    "UNHPL",
    "SPC",
    "SGHC",
    "AHL",
    "BHDC",
    "HDHPC",
    "MHCL",
    "SMH",
    "RFPL",
    "MEN",
    "UHEWA",
    "HHL",
    "UMRH",
    "SIKLES",
    "MEL",
    "RURU",
    "MAKAR",
    "SMJC",
    "MKHL",
    "CKHL",
    "MMKJL",
    "DOLTI",
    "BHL",
    "GVL",
    "MSHL",
    "RIDI",
    "MEHL",
    "IHL",
    "SMHL",
    "MCHL",
    "RAWA",
    "ULHC",
    "BGWT",
    "MANDU",
    "VLUCL",
  ],
  Investment: ["CIT", "HATHY", "HIDCL", "NIFRA", "ENL", "NRN", "CHDC"],
  "Life Insurance": [
    "ALICL",
    "LICN",
    "NLIC",
    "NLICL",
    "CLI",
    "RNLI",
    "ILI",
    "SNLI",
    "SJLIC",
    "SRLI",
    "HLI",
    "PMLI",
  ],
  "Manufacturing And Processing": [
    "BNL",
    "BNT",
    "HDL",
    "NLO",
    "UNL",
    "SHIVM",
    "SARBTM",
    "SONA",
    "GCIL",
  ],
  Microfinance: [
    "CBBL",
    "DDBL",
    "FMDBL",
    "KMCDB",
    "NLBBL",
    "NUBL",
    "SKBBL",
    "SLBBL",
    "SMFDB",
    "SWBBL",
    "MLBBL",
    "LLBS",
    "MMFDB",
    "JSLBB",
    "VLBS",
    "RSDC",
    "NMBMF",
    "MERO",
    "NADEP",
    "ALBSL",
    "NMFBS",
    "GMFBS",
    "HLBSL",
    "ILBS",
    "FOWAD",
    "SMATA",
    "MSLB",
    "GILB",
    "SMB",
    "GBLBS",
    "NESDO",
    "MLBSL",
    "GLBSL",
    "NICLBSL",
    "SLBSL",
    "SDLBSL",
    "RULB",
    "UNLB",
    "JBLB",
    "SHLB",
    "ULBSL",
    "ADLB",
    "SMFBS",
    "WNLB",
    "SABSL",
    "SAMAJ",
    "DLBS",
    "ANLB",
    "MLBS",
    "AVYAN",
    "JALPA",
    "ACLBSL",
    "USLB",
    "NSLB",
    "CYCL",
    "KLBSL",
    "BPW",
    "KLBS",
    "SWMF",
    "NMLBBL",
    "MATRI",
    "SMPDA",
  ],
  "Mutual Fund": [
    "NEF",
    "NMBHF1",
    "LEMF",
    "SEF",
    "SAEF",
    "NICGF",
    "CMF1",
    "NBF2",
    "CMF2",
    "NIBLSF",
    "NMB50",
    "SIGS2",
    "NICBF",
    "SFMF",
    "LUK",
    "NADDF",
    "SLCF",
    "KEF",
    "SBCF",
    "NIBSF2",
    "PSF",
    "NICSF",
    "RMF1",
    "MMF1",
    "NBF3",
    "KDBY",
    "NICFC",
    "GIBF1",
    "NSIF2",
    "SAGF",
    "NIBLGF",
    "SFEF",
    "PRSF",
    "SIGS3",
    "C30MF",
    "RMF2",
    "LVF2",
    "H8020",
    "NIBLSTF",
    "KSY",
  ],
  "Non-Life Insurance": [
    "NICL",
    "NIL",
    "NLG",
    "SICL",
    "PRIN",
    "RBCL",
    "IGI",
    "HEI",
    "SGIC",
    "SPIL",
    "SALICO",
    "UAIL",
  ],
  Others: [
    "NTC",
    "NRIC",
    "HRL",
    "MKCL",
    "SJLICP",
    "NRM",
    "NWCL",
    "NRICP",
    "CIZBD90",
  ],
  "Promotor Share": [
    "AEFLPO",
    "ALICLP",
    "BFLPO",
    "BLDBLP",
    "CEDBLP",
    "CMBFLP",
    "CMBFPO",
    "CMBSLp",
    "CZBILP",
    "EBLPO",
    "EFLPO",
    "GBIMEP",
    "GFCLPO",
    "GFLKPO",
    "GRANDP",
    "GSDBLP",
    "HBLPO",
    "ICFCPO",
    "IDBLPO",
    "IFILPO",
    "IMEFIP",
    "JBBLPO",
    "JFLPO",
    "KAFILP",
    "KBBLPO",
    "KBLPO",
    "KDBLPO",
    "KISTPO",
    "LBLPO",
    "LFCPO",
    "LFLCPO",
    "MBBLPO",
    "MBLPO",
    "MDBLPO",
    "MFLPO",
    "NABBPO",
    "NABILP",
    "NBBPO",
    "NCCBPO",
    "NCMPO",
    "NDBPO",
    "NEFLPO",
    "NHMFPO",
    "NIBPO",
    "NICAP",
    "NLICLP",
    "NMBPO",
    "NNFCPO",
    "NSMPO",
    "OFLPO",
    "PCBLP",
    "PDBLPO",
    "PFCLPO",
    "PFLBSP",
    "PFLPO",
    "PRFLPO",
    "PROFLP",
    "RMBFPO",
    "SBBLJP",
    "SNMAPO",
    "SBIPO",
    "SBLPO",
    "SDBLPO",
    "SETIPO",
    "SEWAPO",
    "SFCPO",
    "SFFILP",
    "SFLPO",
    "SIFCPO",
    "SLICLP",
    "SRBLPO",
    "STFLPO",
    "SUBBLP",
    "SUPRMP",
    "SWBBLP",
    "TBBLP",
    "UFCLPO",
    "UFLKPO",
    "UFLPO",
    "YFLPO",
    "UFILPO",
    "MDBPO",
    "PSDBLP",
    "PFILPO",
    "HAMAPO",
    "EDBLPO",
    "NILPO",
    "SICPO",
    "GLICLP",
    "ARDBLP",
    "GBBLPO",
    "SYFLPO",
    "SICLPO",
    "BSBLPO",
    "REDBLP",
    "SILPO",
    "BHBLPO",
    "PRVUPO",
    "WDBLPO",
    "CSDBLP",
    "CNDBLP",
    "EKBLPO",
    "HAMROP",
    "KNBLPO",
    "LLBSPO",
    "MNBBLP",
    "BUDBLP",
    "PFCPO",
    "JHBLPO",
    "NFSPO",
    "PICLPO",
    "RLFLPO",
    "ALDBLP",
    "APEXPO",
    "CCBLPO",
    "CBLPO",
    "GDBLPO",
    "GABLPO",
    "JBNLPO",
    "JEFLPO",
    "MSBBLP",
    "MEGAPO",
    "MIDBLP",
    "NBSLPO",
    "NLBBLP",
    "NIDCPO",
    "NUBLPO",
    "PRDBLP",
    "RMDCPO",
    "SKBBLP",
    "SHINEP",
    "SINDUP",
    "SCBPO",
    "SMFDBP",
    "CFCLPO",
    "RBCLPO",
    "KMCDBP",
    "PADBLP",
    "BGDBLP",
    "PRINPO",
    "DDBLPO",
    "INDBPO",
    "NLGPO",
    "SODBLP",
    "DBBLPO",
    "ILFCPO",
    "NICLPO",
    "TDBLPO",
    "LICNPO",
    "CBBLPO",
    "NCDBPO",
    "EICPO",
    "HGIPO",
    "LGILPO",
    "PLICPO",
    "MLBBLP",
    "SADBLP",
    "INDBLP",
    "KADBLP",
    "MMFDBP",
    "PICPO",
    "PURBLP",
    "SAFLPO",
    "VLBSPO",
    "JSLBBP",
    "KCDBLP",
    "RBBBLP",
    "SLBBLP",
    "WOMIPO",
    "FBBLPO",
    "FMDBLP",
    "MMDBLP",
    "BFCLPO",
    "GMFILP",
    "KEBLPO",
    "KKBLPO",
    "UICPO",
    "MFILPO",
    "GUFLPO",
    "KRBLPO",
    "BOKLPO",
    "ODBLPO",
    "KSBBLP",
    "MLBLPO",
    "MPFLPO",
    "LBBLPO",
    "CEFLPO",
    "IGIPO",
    "NADEPP",
    "HATHPO",
    "TMDBLP",
    "NMBMFP",
    "SFCLP",
    "GRDBLP",
    "GBLBSP",
    "SDESIP",
    "AKBSLP",
    "SAPDBLP",
    "RSDCP",
    "NMFBSP",
    "FOWADP",
    "MSLBP",
    "HLBSLP",
    "MEROPO",
    "SNLBPO",
    "KLBSLP",
    "HIDCLP",
    "SMBPO",
    "NICLBSLP",
    "NABBCP",
    "JBLBP",
    "NSLBP",
    "CORBLPO",
    "ACLBSLP",
    "ALBSLP",
    "SMFBSP",
    "ILBSP",
    "SMATAP",
    "GILBPO",
    "SABSLPO",
    "SWMFPO",
    "USLBP",
    "HEIP",
    "AVYANP",
    "NIMBPO",
    "SPILPO",
    "BPWP",
    "ANLBP",
    "WNLBP",
    "HLIPO",
    "SDLBSLP",
    "KPCLPO",
    "SALICOPO",
    "LSLPO",
    "RNLIP",
    "SNLIP",
    "CITPO",
    "PMLIP",
    "HRLP",
    "UAILPO",
    "UNLBP",
    "NIFRAP",
    "SGICP",
  ],
  Tradings: ["BBC", "STC", "SEBON"],
  // ... (other sectors omitted for brevity)
};

export function getSectorFromSymbol(symbol: string) {
  for (const [sector, stocks] of Object.entries(stockData)) {
    if (stocks.includes(symbol)) {
      return sector;
    }
  }
  return "Unknown";
}
